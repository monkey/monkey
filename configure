#!/bin/bash
#
#  Monkey HTTP Server
#  ==================
#  Copyright 2001-2014 Monkey Software LLC <eduardo@monkey.io>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

__MONKEY__="1"
__MONKEY_MINOR__="6"
__MONKEY_PATCHLEVEL__="0"
__MONKEY_GIT__="release"

VERSION="1.6.0"
SONAME="libmonkey.so.$__MONKEY__.$__MONKEY_MINOR__"
SYSNAME=`uname -s`
SYSINFO=`uname -sr`
INCDIR="include/monkey"

BOLD="\033[1m"
END_COLOR="\033[0m"
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
RED="\033[0;31m"
BLUE="\033[0;34m"

# Bash colors
txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
bakgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
txtrst='\e[0m'    # Text Reset

# Create configuration files under 'conf/'
make_conf()
{
	cat $base_path/$INCDIR/config.path $base_path/lang/$lang/mconf \
            $base_path/lang/$lang/sites/default > makeconf.sh
	sed -i $OS_SED 's/#PORT#/$default_port/g' makeconf.sh
	sed -i $OS_SED 's/#USER#/$default_user/g' makeconf.sh
	sed -i $OS_SED 's|#PIDFILE#|'$pidfile'|g' makeconf.sh
	chmod 755 makeconf.sh
	./makeconf.sh
	rm makeconf.sh
	rm $base_path/$INCDIR/config.path
}

local_dirs()
{
	bin="bin"
	logs="logs"
	sites="conf/sites"

	if [ ! -d $bin ]; then
		mkdir -p $bin
	fi

	if [ ! -d $logs ]; then
		mkdir -p $logs
	fi

	if [ ! -d $sites ]; then
		mkdir -p $sites
	fi
}

get_realpath() {
    [[ -n "$no_symlinks" ]] && local pwdp='pwd -P' || local pwdp='pwd' # do symlinks.
    echo $( cd "$( echo "${1%/*}" )" 2>/dev/null; $pwdp )"/"${1##*/}
}

# Main function
main()
{
	local_dirs
	dir_diff=0
	actual_path=`pwd`

        # Check if build path is the same or a separate one
        rpath=$(get_realpath $0)
        base_path=$(dirname $rpath)
        if [ "$base_path" != "$actual_path" ]; then
            build_sep=1
        fi

	if [ "$prefix" != "$actual_path" ]; then
		dir_diff=1
	fi

	if [ "$bindir" != "$actual_path/bin" ]; then
		dir_diff=1
	fi

	if [ "$sysconfdir" != "$actual_path/conf" ]; then
		dir_diff=1
	fi

	if [ "$datadir" != "$actual_path/htdocs" ]; then
		dir_diff=1
	fi

	if [ "$logdir" != "$actual_path/logs" ]; then
		dir_diff=1
	fi

	if [ "$mandir" != "$actual_path/man" ]; then
		dir_diff=1
	fi

        echo
        echo
	echo -e "\033[1m=== Checking dependencies ===\033[0m"

	# Check for accept4()
	if [ $only_accept4 -eq 1 ]; then
		check_generic "accept4() function" "#define _GNU_SOURCE" "sys/socket.h" "accept4(0, 0, 0, 0)" "" ""
		if [ $result = -1 ]; then
			exit 1
		fi
	elif [ $only_accept -eq 1 ]; then
		echo -n "+ Using generic accept()............ "
		echo -en $GREEN$BOLD"Yes"$END_COLOR"\n"
		DEFS="$DEFS -DACCEPT_GENERIC"
	else
		check_generic "accept4() function" "#define _GNU_SOURCE" "sys/socket.h" "accept4(0, 0, 0, 0)" "" ""
		if [ $result -ne 0 ]; then
			DEFS="$DEFS -DACCEPT_GENERIC"
		fi
	fi

	if [ $platform == "generic" ]; then
		check_generic "pthread headers" "" "pthread.h" "pthread_t self = pthread_self()" "" "-lpthread"
	fi

        if [ $linux_kqueue -eq 1 ]; then
                DEFS="$DEFS -DLINUX_KQUEUE"
                KFLAGS=`pkg-config libkqueue --cflags`
                KLIBS=`pkg-config libkqueue --libs`
                libs="$libs $KLIBS"
                KLIBS="$KLIBS -pthread"
	        check_generic "Linux kqueue emulation" "" "sys/event.h" "int kqfd = kqueue()" "$KFLAGS" "$KLIBS"
        fi

	if test -z $no_backtrace ; then
		check_generic "backtrace support" "" "execinfo.h" ""
		if [ $result -ne 0 ]; then
			no_backtrace=1
		fi
	fi

	if test $linux_trace ; then
                check_generic "Linux Trace Toolkit (UST)" "" "lttng/tracepoint.h"
                if [ $result -ne 0 ]; then
                        echo
                        echo -n "Error: Linux Trace Toolkit (lttng) is not available "
                        echo    "in your system"
                        echo
                        exit 1
                fi
        fi

	echo
	echo -e "\033[1m=== Plugins included ===\033[0m"
	find $base_path/plugins/ -name Makefile -exec rm -rf {} \;


        # Set an array of static plugins (if any)
        IFS=","
        set -- $static_plugins
        static_array=$@
        unset IFS

	create_makefile_plugins $base_path $plugdir $prefix $bindir $mandir \
		$sysconfdir $datadir $logdir $sysconfdir $datadir \
		$logdir $mandir $enabled_plugins $disabled_plugins $static_array

	echo
	echo -e "\033[1m=== Creating Makefiles and scripts ===\033[0m"

	echo "+ Creating conf/monkey.conf"
	create_conf $base_path $prefix
	make_conf  $base_path $lang $default_port $default_user $pidfile

	echo "+ Creating src/Makefile"
	create_makefile_core base_path mod_libs mod_obj make_script platform \
                             malloc_libc malloc_jemalloc static_plugins

	echo "+ Creating plugins/Make.static"
	create_plugins_make_static static_array

	echo "+ Creating plugins/Make.common"
	create_plugins_make_common base_path bindir \
                         polarssl_headers polarssl_library polarssl_debug_level

        create_header_static_plugins base_path sysconfdir static_array

	echo "+ Creating include/monkey/mk_info.h"
	create_info base_path sysconfdir \
                    SYSNAME __MONKEY__ __MONKEY_MINOR__ __MONKEY_PATCHLEVEL__ \
                    cmd uname static_array

	echo "+ Creating bin/banana script"
	create_banana_script bindir logdir default_port

	create_monkey_systemd_script bindir logdir default_port systemddir

	echo -e "+ Creating Makefile"
	if [ $dir_diff -eq 0 ]; then
		create_makefile1 base_path bindir malloc_jemalloc
	else
		create_makefile1_install prefix bindir mandir sysconfdir \
                datadir logdir malloc_jemalloc
	fi

        # if the memory allocator is jemalloc, lets start configuring the dependency
        if [ $malloc_jemalloc -eq 1 ]; then
                echo
                echo -e "\033[1m=== Configuring Memory Allocator ===\033[0m"
                cd deps/jemalloc
                ./configure $JEMALLOC_OPTS \
                            --with-jemalloc-prefix=je_ \
                            --enable-cc-silence \
                            CFLAGS="-std=gnu99 -Wall -pipe -g3 -O3 -funroll-loops " \
                            LDFLAGS="" > jemalloc.config 2>&1
                if [ $? -eq 0 ]; then
                      echo "+ Jemalloc configured"
                else
                      cat jemalloc.config
                      echo
                      echo "check more details with: $ cat deps/jemalloc/config.log"
                      exit 1
                fi
                cd ../../
        fi

	echo
	echo -e "\033[1m=== Monkey Configuration ===\033[0m"
	echo -e "Platform\t= $platform"
	echo -e "Compiler\t= $CC"
	echo -e "CFLAGS\t\t= $CFLAGS"
	echo -e "LDFLAGS\t\t= $LDFLAGS"

	if [ "$DEFS" != "" ]; then
		echo -e "DEFS\t\t= $DEFS"
	fi

	echo

	echo -en "Shared library\t= "
	[ -n "$sharedlib" ] && echo "enabled" || echo "disabled"

	echo -en "Relaxed plugins\t= "
	[ -n "$relaxed_plugins" ] && echo "enabled" || echo "disabled"

	echo
	echo -e "Prefix\t\t= $prefix"
	echo -e "Bindir\t\t= $bindir"
	echo -e "Libdir\t\t= $libdir"
	echo -e "Incdir\t\t= $incdir"
	echo -e "Sysconfdir\t= $sysconfdir"
	echo -e "Datadir\t\t= $datadir"
	echo -e "Mandir\t\t= $mandir"
	echo -e "Logdir\t\t= $logdir"
	echo -e "PidFile\t\t= $pidfile"

	if [ "$plugdir" != "" ]; then
		echo -e "Plugdir\t\t= $plugdir"
	fi

	echo -e "Systemddir\t= $systemddir"

	echo
	echo "--"
	echo -en "$GREEN Monkey $END_COLOR configuration is$YELLOW done!$END_COLOR, to build type 'make"
	if [ $dir_diff -eq 1 ]; then
		echo -n " && make install' "
	else
		echo "' "
	fi
	echo -n "Have fun! ;)"
	echo

	echo "#ifndef MK_ENV_H" > include/monkey/mk_env.h
	echo "#define MK_ENV_H" >> include/monkey/mk_env.h
	echo "#define CC \"${CC}\"" >> include/monkey/mk_env.h
	echo "#define AR \"${AR}\"" >> include/monkey/mk_env.h
	echo "#endif" >> include/monkey/mk_env.h
}

# Test if compiling a file with a given feature will work.
# $1: Description of the feature
# $2: Header before includes (defines?)
# $3: List of needed #includes, separated by spaces
# $4: A function call, e.g. "printf("Hello, world\n")
# $5: Compiler flags
# $6: A list of libraries, e.g. "-lrt -lpthread"
check_generic() {
	printf "+ Checking for %s ... " "$1"
	echo -n "" > check.c
        echo $2 >> check.c
	for inc in $3; do
		printf "#include <%s>\n" "$inc" >> check.c
	done
	printf "int main(int argc, char **argv) { %s; return 0; }\n" "$4" >> check.c
	$CC $5 -Wimplicit -Werror check.c $6 &> configure.log
	if [ $? -ne 0 ]; then
		result=-1
		echo -en $RED$BOLD"No"$END_COLOR"\n"
	else
		result=0
		echo -en $GREEN$BOLD"Yes"$END_COLOR"\n"
	fi
	rm -f check.c configure.log a.out
}

# Create Makefile
create_makefile1()
{
        if [ $malloc_jemalloc -eq 1 ]; then
            all_deps="$all_deps jemalloc"
        else
            all_deps=""
        fi

	cat > Makefile << EOF
# Monkey HTTP Server: Makefile
# ============================
export monkey_root=\$(CURDIR)
PREFIX=\$(DESTDIR)${prefix}
BINDIR=\$(DESTDIR)${bindir}
LIBDIR=\$(DESTDIR)${libdir}
INCDIR=\$(DESTDIR)${incdir}
MANDIR=\$(DESTDIR)${mandir}
SYSCONFDIR=\$(DESTDIR)${sysconfdir}
DATADIR=\$(DESTDIR)${datadir}
LOGDIR=\$(DESTDIR)${logdir}
SYSTEMDDIR=$systemddir
PLUGINDIR=\$(DESTDIR)${plugdir}
VERSION=$VERSION

all: $all_deps
	@\$(MAKE) -s -C $base_path/plugins -f Make.static all
	@\$(MAKE) -s -C $base_path/src all
	@\$(MAKE) -s -C plugins all
	@echo "  DONE"

jemalloc:
	@echo "  CC    jemalloc [all]"
	@\$(MAKE) -s -C deps/jemalloc

plugins:
	@\$(MAKE) -s -C plugins all

monkeyversion:
	@echo $VERSION

help:
	@echo "Make help:"
	@echo "  plugins       - Build webserver's plugins"
	@echo "  monkeyversion - Output the webserver's version"
	@echo "  clean         - Remove generated binary files"
	@echo "  distclean     - Clean plus configuration and Make files"
	@echo " "
	@echo "Execute 'make' to build the webserver."

clean:
	@(cd src; \$(MAKE) clean)
	@(cd plugins; \$(MAKE) clean)
distclean:
	@(cd src; \$(MAKE) distclean)
EOF
}

is_static_plugin() {

    check=plugins/$1/STATIC

    if [ -f $check ]; then
        found=0
        # Populate the static_array if required
        for p in $static_array;
        do
            if [ "$1" == "$p" ]; then
                found=1
            fi
        done

        if [ $found == 0 ]; then
            # Append to array
            static_array+=$1
        fi

        return 1
    fi

    for p in $static_array;
    do
        if [ "$1" == "$p" ]; then
            return 1
        fi
    done

    return 0
}

# This function check if the plugin must be compiled/installed
# or not based in the following rules:
#
#  #1 -> --enable-plugins
#  #2 -> --disable-plugins
#  #3 -> Plugin spec: MANDATORY, OPTIONAL, DISABLED & EXPERIMENTAL
#
#  return values: 0 = No
#                 1 = Yes
skip_plugin() {
#echo "skip_plugin($entry) '$enabled_plugins'  '$disabled_plugins'"

	en_wildcard=0
	if [ "$enabled_plugins" == '*' ]; then
		en_wildcard=1
	fi

	di_wildcard=0
	if [ "$disabled_plugins" == '*' ]; then
		di_wildcard=1
	fi

	IFS=","
	set -- $enabled_plugins
	en_array=$@
	set -- $disabled_plugins
	di_array=$@

	unset IFS

	enabled=0
	disabled=0

	for e in $en_array;
	do
		if [ "$entry" == "$e" ]; then
			enabled=1
			break
		fi
	done

	for d in $di_array;
	do
		if [ "$entry" == "$d" ]; then
			disabled=1
			break
		fi
	done


	path="plugins/$entry"
	if [ ! -d "$path" ]; then
		return 1
	fi

	# does it contains a proper Makefile.in ?
	if [ ! -e "$path/Makefile.in" ]; then
		return 1
	fi

	# Check enable wildcard */
	if [ $en_wildcard -eq 1 ] && [ $disabled -eq 0 ]; then
		return 0
	fi

	# Check disable wildcard */
	if [ $di_wildcard -eq 1 ] && [ $enabled -eq 0 ]; then
		return 1
	fi

	# disabled and not enforced
	if [ $disabled -eq 1 ] && [ $enabled -eq 0 ]; then
		return 1
	fi

	if [ $disabled -eq 0 ] && [ $enabled -eq 1 ]; then
		return 0
	fi

	# Disabled by spec and not enforced
	if test -e $path/DISABLED && [ $enabled -eq 0 ] ; then
		return 1
	fi

	# Experimental and not enforced
	if test -e $path/EXPERIMENTAL && [ $enabled -eq 1 ]; then
		return 1
	fi

	# Optional plugin and not disabled
	if test -e $path/OPTIONAL && [ $disabled -eq 0 ]; then
		return 0
	fi

	# Mandatory plugin and not disabled
	if test -e $path/MANDATORY && [ $disabled -eq 0 ]; then
		return 0
	fi

	# Return True by default
	return 1
}

create_makefile1_install()
{
        # memory allocator
        if [ $malloc_jemalloc -eq 1 ]; then
                all_deps="$all_deps jemalloc"
        else
                all_deps=""
        fi

	# remove old data
	rm -rf plugins.conf plugins.list
        touch plugins.conf
	for e in conf/plugins/*
	do
		entry=`echo $e | awk -F "/" '{print $3}'`
		skip_plugin $entry $enabled_plugins $disabled_plugins
		if [ $? -eq 1 ]; then
			continue
		fi
		echo -e "\tcp -r conf/plugins/$entry \${SYSCONFDIR}/plugins/" >> plugins.conf
	done

	plgconf=`cat plugins.conf`
	for e in plugins/*
	do
		entry=`echo $e | awk -F "/" '{print $2}'`
		skip_plugin $entry $enabled_plugins $disabled_plugins
		if [ $? == 1 ]; then
			continue
		fi
		echo -e "\tinstall -m 644 plugins/$entry/*.so \${PLUGINDIR}/" >> plugins.list
	done

	plglist=`cat plugins.list`

	if [ -n "$sharedlib" ]; then
		incinstall="	install -m 644 include/monkey/libmonkey.h \$(INCDIR)"
	fi

	ins_systemd=""
	if [ $systemddir ]; then
		ins_systemd="	install -d \$(SYSTEMDDIR)
	install -m 644 monkey.service \$(SYSTEMDDIR)"
	fi

	cat > Makefile <<EOF
# Monkey HTTP Server: Makefile
# ============================
export monkey_root=\$(CURDIR)
PREFIX=\$(DESTDIR)${prefix}
BINDIR=\$(DESTDIR)${bindir}
LIBDIR=\$(DESTDIR)${libdir}
INCDIR=\$(DESTDIR)${incdir}
MANDIR=\$(DESTDIR)${mandir}
SYSCONFDIR=\$(DESTDIR)${sysconfdir}
DATADIR=\$(DESTDIR)${datadir}
LOGDIR=\$(DESTDIR)${logdir}
SYSTEMDDIR=$systemddir
PLUGINDIR=\$(DESTDIR)${plugdir}
VERSION=$VERSION

all: monkey.pc $all_deps
	@\$(MAKE) -s -C $base_path/src all
	@\$(MAKE) -s -C plugins all
	@echo "  DONE"

jemalloc:
	@echo "  CC    jemalloc [all]"
	@\$(MAKE) -s -C deps/jemalloc

clean:
	@(cd src; \$(MAKE) clean)
	@(cd plugins; \$(MAKE) clean)
	@rm -f monkey.pc

distclean:
	@(cd src; \$(MAKE) distclean)

install:
	\$(MAKE) -C src all
	install -d \$(BINDIR)
	install -d \$(LIBDIR)/pkgconfig
	install -d \$(INCDIR)
	install -d \$(MANDIR)/man1
	install -d \$(MANDIR)/man3
	install -d \$(SYSCONFDIR)
	install -d \${SYSCONFDIR}/sites
	install -d \${SYSCONFDIR}/plugins
	install -d \${DATADIR}
	install -d \${DATADIR}/imgs
	install -d \${DATADIR}/php
	install -d \${DATADIR}/docs
	install -d \${LOGDIR}
	install -d \${PLUGINDIR}
	install -m 755 bin/* \$(BINDIR)
	install -m 644 ./conf/*.* \$(SYSCONFDIR)
	install -m 644 include/monkey/*.h \$(INCDIR)
$ins_systemd
$plgconf
$plglist
	install -m 644 ./conf/sites/* \${SYSCONFDIR}/sites
	install -m 644 ./man/*.1 \$(MANDIR)/man1
	install -m 644 ./man/*.3 \$(MANDIR)/man3
$incinstall
	-install -m 644 src/$SONAME \$(LIBDIR)
	-install -m 644 monkey.pc \$(LIBDIR)/pkgconfig
	-ln -sf $SONAME \$(LIBDIR)/libmonkey.so

	install -m 644 ./htdocs/index.html \$(DATADIR)
	install -m 644 ./htdocs/404.html \$(DATADIR)
	install -m 644 ./htdocs/favicon.ico \$(DATADIR)
	install -d \$(DATADIR)/imgs
	install -m 644 ./htdocs/imgs/monkey_logo.png \$(DATADIR)/imgs
	install -m 644 ./htdocs/imgs/info_pic.jpg \$(DATADIR)/imgs
	install -d \$(DATADIR)/css
	install -m 644 ./htdocs/css/bootstrap.min.css \$(DATADIR)/css
	@echo
	@echo  " Running Monkey :"
	@echo  " ----------------"
	@echo
	@echo  "  # $bindir/monkey"
	@echo
	@echo  "  For more help use '-h' option"
	@echo

monkey.pc:
	@sed -e "s@PREFIX@$prefix@" -e "s@LIBDIR@$libdir@" -e "s@INCDIR@$incdir@" \
		-e "s@VERSION@$VERSION@" monkey.pc.in > monkey.pc

EOF
}

# Create monkey/src/Makefile
create_makefile_core()
{
	if [ $platform == "generic" ]; then
		libs="$libs -pthread"
	elif [ $platform == "android" ]; then
		libs="$libs "
	fi

	if [ -n "$sharedlib" ]; then
		alltarget="../bin/monkey lib"
	else
		alltarget="../bin/monkey"
	fi

    if [ $mk_stats == 1 ]; then
        alltarget="$alltarget libstats"
    fi

        if [ $malloc_jemalloc -eq 1 ]; then
                extra="../deps/jemalloc/lib/libjemalloc.a"
                extraso="-Wl,--whole-archive ../deps/jemalloc/lib/libjemalloc_pic.a -Wl,--no-whole-archive"
                libs="$libs -lm"
        fi
        p=`pwd`/src
	cat > $base_path/src/Makefile<<EOF
_PATH   = \$(patsubst \$(monkey_root)/%, %, \$(CURDIR))
CC      = @printf "  CC   \$(_PATH)/\$@"; $CC
CC_QUIET= @echo; $CC
CFLAGS  = $CFLAGS -rdynamic
DEFS    += $DEFS
LIBDEFS = -DSHAREDLIB -fPIC \$(DEFS)
INCDIR  = ../include/
LDFLAGS = $LDFLAGS
DESTDIR = ../bin/monkey
LIBS    = -ldl $libs
OBJ     = monkey.o mk_mimetype.o mk_vhost.o \\
          mk_header.o mk_config.o mk_signals.o \\
          mk_user.o mk_utils.o mk_stream.o mk_scheduler.o \\
          mk_string.o mk_memory.o mk_connection.o mk_iov.o \\
          mk_http.o mk_http_parser.o \\
          mk_file.o mk_socket.o mk_clock.o mk_cache.o mk_event.o \\
          mk_server.o mk_kernel.o mk_rbtree.o mk_plugin.o mk_lib.o
STATIC_DEPS    = \$(MK_STATIC_DEPS)
STATIC_PLUGINS = $abs_static_plugins

LIBOBJ  = \$(OBJ:.o=.lo)

.PHONY: clean distclean lib

all: $alltarget

lib: $SONAME

libstats: libstats.so

-include \$(OBJ:.o=.d)

../bin/monkey: \$(OBJ)
	\$(MAKE) -C ../plugins/ Make.static
	\$(CC_QUIET) \$(CFLAGS) \$(STATIC_PLUGINS) \$(DEFS) \$(LDFLAGS) -o $p/\$@ \$(OBJ) $mod_obj $extra \$(LIBS) \$(STATIC_PLUGINS) \$(STATIC_DEPS)

$SONAME: \$(LIBOBJ)
	\$(CC_QUIET) \$(CFLAGS) \$(LIBDEFS) \$(LDFLAGS) -Wl,-soname,$SONAME -shared -o \$@ $extraso \$(LIBOBJ) $mod_obj \$(LIBS)
	ln -sf $SONAME libmonkey.so

\$(LIBOBJ): \$(OBJ)

libstats.so: mk_stats.o
	\$(CC_QUIET) \$(CFLAGS) $^ -o \$@ -shared -ldl -lrt

mk_stats.o: mk_stats.c
	\$(CC_QUIET) -c -fPIC $^ -o \$@ \$(CFLAGS) \$(DEFS) -I\$(INCDIR) -ldl

clean:
	rm -rf *.[od] $SONAME libmonkey.so libstats.so *.lo
	rm -rf ../bin/monkey

distclean:
	rm -rf *.o ../bin/* Makefile \\
	../Makefile ../conf/monkey.conf \\
	../conf/sites/* include/mk_info.h ../logs/*
	find ../plugins -name Makefile -exec rm {} \;

.c.o:
	\$(CC) -c \$(CFLAGS) \$(DEFS) -I\$(INCDIR) \$<
	\$(CC_QUIET) -MM -MP \$(CFLAGS) \$(DEFS) -I\$(INCDIR) \$*.c -o $p/\$*.d > /dev/null &2>&1

%.lo : %.c
	\$(CC) -c -o $p/\$@ \$(CFLAGS) \$(LIBDEFS) -I\$(INCDIR) \$<

EOF
}

create_makefile_plugins()
{
        dir=$basepath
	makefile="plugins/Makefile"
	plugins_load="conf/plugins.load"

	echo -n > $plugins_load
	echo "# Monkey Plugins Loader" >> $plugins_load
	echo "# =====================" >> $plugins_load
	echo "# Monkey plugins are extended functionalities for Monkey," >> $plugins_load
	echo "# the main directive to load a plugin is LoadPlugin plus" >> $plugins_load
	echo "# the absolute path for the desired plugin." >> $plugins_load
	echo "#" >> $plugins_load
	echo "# Please check the following list of available plugins:" >> $plugins_load
	echo "" >> $plugins_load
	echo "[PLUGINS]" >> $plugins_load
	echo "" >> $plugins_load

	if [ $platform == "android" ]; then
		if test -z $disabled_plugins; then
			disabled_plugins="cheetah,palm,logger,cgi"
		fi
	fi


	for plugin_dir in $base_path/plugins/*;
	do
		# Skip non-directories
		if ! test -d "$plugin_dir" ; then
			continue
		fi

		# Get plugin name and check if we should skip it
		entry=`echo $plugin_dir | awk -F "/" '{print $NF}'`
		skip_plugin $entry $enabled_plugins $disabled_plugins
		disabled=$?

		if [ $disabled == 1 ]; then
			continue
		fi

		comment="    "
		for i in $entry; do name=`echo -n "${i:0:1}" | tr "[:lower:]" "[:upper:]"`;
			echo -e "+ ${name}${i:1}";
		done

                # Check if the plugin is static or dynamic
                is_static_plugin $entry $static_array
                static_check=$?

		# Create Makefile
                if [ $static_check == 0 ]; then
		    MAKE_ALL="${MAKE_ALL}\t@(cd $entry && \$(MAKE) && cd ..)\n"
		    MAKE_CLEAN="${MAKE_CLEAN}\t@(cd $entry && \$(MAKE) clean && cd ..)\n"
                else
		    MAKE_ALL="${MAKE_ALL}\t@(cd $entry && \$(MAKE) monkey-$entry.a && cd ..)\n"
		    MAKE_CLEAN="${MAKE_CLEAN}\t@(cd $entry && \$(MAKE) clean && cd ..)\n"
                    abs_static_plugins="$abs_static_plugins ../plugins/$entry/monkey-$entry.a"
                fi

		for d in `find $plugin_dir -type d`
		do
			if [ -f "${d}/Makefile.in" ];
			then
				sed -e "s|\$CC|$CC|" -e "s|\$CFLAGS|$CFLAGS|" -e "s|\$LDFLAGS|$LDFLAGS|" -e "s|\$DEFS|$DEFS|" -e "s|\$AR|$AR|" $d/Makefile.in > $d/Makefile
			fi
		done


                if [ $static_check == 0 ]; then
		    # Add details to plugins.load using ABOUT file
		    if test -e $plugin_dir/ABOUT ; then
			cat $plugin_dir/ABOUT | sed -e 's/^/    # /' >> $plugins_load
			echo "    #" >> $plugins_load
		    else
			echo "    #" >> $plugins_load
		    fi

		    if ! test -e $plugin_dir/MANDATORY ; then
			comment="    # "
		    fi

		    if [ "$plugdir" != "$aux/plugins" ]; then
			echo "${comment}Load $plugdir/monkey-$entry.so" >> $plugins_load
		    else
			echo "${comment}Load $dir/$plugin_dir/monkey-$entry.so" >> $plugins_load
		    fi

		    echo "" >> $plugins_load
                fi

		# Copy specific plugin configuration files
		if [ -d "$plugin_dir/conf" ]; then
			target="conf/plugins/$entry/"
			mkdir -p $target
			cp -r $plugin_dir/conf/* $target/

		        # Replace configuration variables:
			find $target/* -type f -exec sed -i $OS_SED "s,#PREFIX#,$prefix," {} ';'
			find $target/* -type f -exec sed -i $OS_SED "s,#BINDIR#,$bindir," {} ';'
			find $target/* -type f -exec sed -i $OS_SED "s,#LIBDIR#,$libdir," {} ';'
			find $target/* -type f -exec sed -i $OS_SED "s,#MANDIR#,$mandir," {} ';'
			find $target/* -type f -exec sed -i $OS_SED "s,#SYSCONFDIR#,$sysconfdir," {} ';'
			find $target/* -type f -exec sed -i $OS_SED "s,#DATADIR#,$datadir," {} ';'
			find $target/* -type f -exec sed -i $OS_SED "s,#LOGDIR#,$logdir," {} ';'
			find $target/* -type f -exec sed -i $OS_SED "s,#PIDFILE#,$pidfile," {} ';'
			find $target/* -type f -exec sed -i $OS_SED "s,#PLUGDIR#,$plugdir," {} ';'
		fi

		# Distribute binary scripts provided by plugins
		if test -e $plugin_dir/bin ; then
			cp -r $plugin_dir/bin/* bin/
		fi
	done

	echo "all:" > $base_path/$makefile
	echo -e $MAKE_ALL >> $base_path/$makefile
	echo "" >> $base_path/$makefile
	echo "clean:" >> $base_path/$makefile
	echo -e $MAKE_CLEAN >> $base_path/$makefile

# Add 'install' option to Makefile if plugdir was specified
	if [ "$plugdir" != "" ]; then
		echo -e "\ninstall:" >> $base_path/$makefile
		echo -e "\tinstall -d $plugdir" >> $base_path/$makefile

		for plugin_dir in plugins/*;
		do
		# Get plugin name and check if we should skip it
			entry=`echo $plugin_dir | awk -F "/" '{print $2}'`
			skip_plugin $entry $enabled_plugins $disabled_plugins
			disabled=$?
			if [ $disabled == 1 ]; then
				continue
			fi

			echo -e "\tinstall -m 644 $dir/$plugin_dir/monkey-$entry.so $plugdir/" >> $makefile
		done
	fi
}

# Create plugins/Make.static
create_plugins_make_static()
{
    echo "all:" > plugins/Make.static

    for entry in $static_array;
    do
        echo "	\$(MAKE) -C $entry/ monkey-$entry.a" >> plugins/Make.static
    done
}

# Create plugins/Make.common
create_plugins_make_common()
{
	LIBS=''
	if [ $malloc_jemalloc == 1 ]; then
		LIBS=`pwd`/deps/jemalloc/lib/libjemalloc.a
	fi

	if [ -n "$polarssl_headers" ]; then
		MK_POLARSSL_HEADERS="-I$polarssl_headers"
	fi
	if [ -n "$polarssl_library" ]; then
		MK_POLARSSL_LIBRARY="-L$polarssl_library -Wl,-rpath=$polarssl_library"
	fi

	if [ -n "$polarssl_debug_level" ]; then
		MK_POLARSSL_DEBUG_LEVEL="$polarssl_debug_level"
	fi

	cat > $base_path/plugins/Make.common <<EOF
_PATH     = \$(patsubst \$(monkey_root)/%, %, \$(CURDIR))
INC_EXTRA = "./"
INCDIR    = ../../include -I\$(INC_EXTRA)
MONKEY_OBJECTS = \$(wildcard ../../src/*.o)
MONKEY_OBJECTS_N = \$(filter-out ../../src/monkey.o, \$(MONKEY_OBJECTS))
MONKEY_BIN_DIR = $bindir
MONKEY_POLARSSL_HEADERS = $MK_POLARSSL_HEADERS
MONKEY_POLARSSL_LIBRARY = $MK_POLARSSL_LIBRARY
MONKEY_POLARSSL_DEBUG_LEVEL = $MK_POLARSSL_DEBUG_LEVEL
LIBS = $LIBS

.c.o:
	\$(CC) \$(CFLAGS) \$(DEFS) -I\$(INCDIR) -fPIC -c $<
	\$(CC_QUIET) -MM -MP \$(CFLAGS) \$(DEFS) -I\$(INCDIR) -I\$(INC_EXTRA) \$*.c -o \$*.d > /dev/null &2>&1

clean:
	rm -rf *.[aod] *~ *.*so* \$(MONKEY_BIN_DIR)/mk_*
EOF
}

# Create include/monkey/mk_info.h
create_info()
{
	cat > $base_path/$INCDIR/mk_info.h <<EOF
#ifndef MK_INFO_H
#define MK_INFO_H

#include <monkey/mk_plugin.h>
#include <monkey/mk_memory.h>
#include <monkey/mk_list.h>

#define OS "$SYSNAME"

#define __MONKEY__            $__MONKEY__
#define __MONKEY_MINOR__      $__MONKEY_MINOR__
#define __MONKEY_PATCHLEVEL__ $__MONKEY_PATCHLEVEL__

#define MONKEY_VERSION (__MONKEY__ * 10000 \\
                        __MONKEY_MINOR__ * 100 \\
                        __MONKEY_PATCHLEVEL__)
#define VERSION          "$__MONKEY__.$__MONKEY_MINOR__.$__MONKEY_PATCHLEVEL__"
#define MK_BUILD_CMD     "$cmd"
#define MK_BUILD_UNAME   "$uname"
#define MONKEY_PATH_CONF "$sysconfdir"
#define PLUGDIR "$plugdir"
#define PYTHONVERSION python$PYTHONVERSION

EOF
	if [ "$syslog_enable" = "1" ]
	then
		str='#define SYSLOG\n'
	fi

	echo -e $str >> $base_path/$INCDIR/mk_info.h

	sed -i $OS_SED -e "s@#define MONKEY__.*@#define MONKEY__            $__MONKEY__@" \
	    -e "s@#define MONKEY_MINOR__.*@#define MONKEY_MINOR__      $__MONKEY_MINOR__@" \
	    -e "s@#define MONKEY_PATCHLEVEL__.*@#define MONKEY_PATCHLEVEL__ $__MONKEY_PATCHLEVEL__@" \
	    $base_path/$INCDIR/libmonkey.h

    echo "#endif" >> $base_path/$INCDIR/mk_info.h
}

create_header_static_plugins()
{
    t=$base_path/$INCDIR/mk_static_plugins.h

    echo "#include <monkey/mk_plugin.h>" > $t
    echo >> $t

    # main structures per plugin
    for e in $static_array;
    do
        echo "struct mk_plugin mk_plugin_$e;" >> $t
    done

    echo >> $t
    echo "void mk_static_plugins()" >> $t
    echo "{" >> $t
    echo "    struct mk_plugin *p;" >> $t
    echo >> $t

    for e in $static_array;
    do
        echo "    p = &mk_plugin_$e;" >> $t
        echo "    mk_list_add(&p->_head, mk_config->plugins);" >> $t
    done

    echo >> $t
    echo "}" >> $t
}

create_conf()
{
	cat > $base_path/$INCDIR/config.path <<EOF
#!/bin/sh
prefix=$prefix
bindir=$bindir
libdir=$libdir
incdir=$incdir
sysconfdir=$sysconfdir
datadir=$datadir
logdir=$logdir
EOF
}

create_monkey_systemd_script()
{
	if [ $systemddir ]; then
        echo "+ Creating systemd.service unit file"
		cat > monkey.service << EOF
[Unit]
Description=Monkey HTTP Server
Requires=network.target
After=network.target

[Service]
Type=fork
ExecStart=$bindir/monkey -D
PIDFile=$pidfile.$default_port
Restart=always

[Install]
WantedBy=multi-user.target
EOF
	fi
}

create_banana_script()
{
	cat > bin/banana << EOF
#!/bin/sh
#
# Monkey HTTP Daemon - Banana Script
# -----------------------------------
# This script allow you to control monkey. Written by Eduardo Silva
# ----------------------------
# Date		: 2002/09/01.
# ----------------------------
#
# Use: ./banana OPTION
#
# Options available to banana:
#
#    start   -> start monkey
#    restart -> restart monkey
#    stop    -> stop monkey if this is running
#    status  -> check if monkey is running
#    help    -> what do u think ?

CONFDIR="$sysconfdir"
BINMONKEY="$bindir/monkey"

PORT=\$(sed -n '/^[ \t]*Port/s/^.* //p' "\$CONFDIR/monkey.conf")
PIDFILE=\$(sed -n '/^[ \t]*PidFile/s/^.* //p' "\$CONFDIR/monkey.conf")."\$PORT"

for arg in \$*; do
	case "\$arg" in
		-*=*) optarg=\`echo "\$arg" | sed 's/[-_a-zA-Z0-9]*=//'\` ;;
		   *) optarg= ;;
	esac

	if  ! test -f \$PIDFILE ; then
		STATUS="no"
	else
		PIDMONKEY=\`cat \$PIDFILE\`
		if ! kill -0 \$PIDMONKEY 2>/dev/null; then
			STATUS="no"
		else
			STATUS="yes"
		fi
	fi

	case "\$arg" in
		start)
			if [ "\$STATUS" = "yes"  ] ; then
				echo "Monkey is running... (PID=\$PIDMONKEY)"
				exit 1
			fi
			if ! test -x \$BINMONKEY ; then
				echo "Error: I can't run binary file"
				exit 1
			else
				if \$BINMONKEY -D  2>/dev/null ; then
					echo "Running Monkey -> OK"
					exit 0
				fi
			fi
		;;
		stop)
			if  [ "\$STATUS" = "no" ]; then
				echo "Monkey is not running."
				exit 1
			fi
			kill -9 \$PIDMONKEY
			rm -rf \$PIDFILE > /dev/null
			echo "Monkey stopped (\$PIDMONKEY)"
			exit 0
			;;
		restart)
			if  [ "\$STATUS" = "yes" ]; then
				if ! kill \$PIDMONKEY  > /dev/null ; then
					killall -9 monkey
				else
					echo -n "Stopping Monkey... "
				fi
			else
				echo -n "Monkey is not running... "
			fi
			if ! test -x \$BINMONKEY ; then
				echo "Error: I can't run binary file"
				exit 1
			else
				\$BINMONKEY -D > /dev/null
				echo "Restarting -> OK"
				exit 0
			fi
			;;
		status)
				if  [ "\$STATUS" = "yes" ]; then
				echo "Monkey is running... (PID=\$PIDMONKEY)"
			else
				echo "Monkey is not running... "
				fi
			exit 0
			;;
		*)
			echo "Use : banana [start|stop|restart|status|help]"
			exit 1
		;;
	esac
done
echo "Use : banana [start|stop|restart|status|help]"

exit 0
EOF
	chmod 755 bin/banana
}

#---------------------------#
# End Functions
#---------------------------#


#---------------------------#
# Starting configure
#---------------------------#
aux=`pwd`

prefix="$aux"
bindir="$aux/bin"
libdir="$aux/lib"
incdir=""
mandir="$aux/man"
sysconfdir="$aux/conf"
datadir="$aux/htdocs"
logdir="$aux/logs"
pidfile="$logdir/monkey.pid"
plugdir="$aux/plugins"
systemddir=""
platform="generic"
build_sep=0
linux_kqueue=0
abs_static_plugins=""

# Generic default values for monkey.conf
default_port="2001"
default_user="nobody"

# accept type
only_accept=0
only_accept4=0

# memory allocator
malloc_libc=0
malloc_jemalloc=1

# python bindings
mk_python=0

# stats
mk_stats=0

PYTHONVERSION=`python -c "import sys;t='{v[0]}.{v[1]}'.format(v=list(sys.version_info[:2]));sys.stdout.write(t)";`

# polarssl
polarssl_headers=""
polarssl_library=""
polarssl_debug_level=0

for arg in $*; do

	case "$arg" in
		-*=*)
			optarg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
		*)
			optarg= ;;
	esac

	case "$arg" in
		--prefix*)
			prefix=$optarg
			bindir="$optarg/bin"
			libdir="$optarg/lib"
			incdir="$optarg/include"
			mandir="$optarg/man"
			sysconfdir="$optarg/conf"
			datadir="$optarg/htdocs"
			logdir="$optarg/logs"
			plugdir="$optarg/plugins"
			;;
		--bindir*)
			bindir=$optarg
			;;
		--mandir*)
			mandir=$optarg
			;;
		--sysconfdir*)
			sysconfdir=$optarg
			;;
		--datadir*)
			datadir=$optarg
			;;
		--libdir*)
			libdir=$optarg
			;;
		--includedir*)
			incdir=$optarg
			;;
		--incdir*)
			incdir=$optarg
			;;
		--logdir*)
			logdir=$optarg
			;;
		--pidfile*)
			pidfile=$optarg
			;;
		--plugdir*)
			plugdir=$optarg
			;;
		--debug*)
			debug=1
			;;
		--trace*)
			trace=1
			;;
		--stats*)
			mk_stats=1
			;;
		--python*)
			mk_python=1
			;;
		--no-backtrace*)
			no_backtrace=1
			;;
                --linux-trace*)
                        linux_trace=1
                        ;;
                --pthread-tls*)
                        pthread_tls=1
                        ;;
                --malloc-libc*)
                        malloc_libc=1
                        malloc_jemalloc=0
                        ;;
		--uclib-mode*)
			uclib_mode=1
			;;
		--musl-mode*)
			musl_mode=1
			;;
		--enable-shared*)
			sharedlib=1
			;;
		--enable-relaxed-plugins*)
			relaxed_plugins=1
			;;
		--enable-plugins*)
			enabled_plugins=$optarg
			;;
		--disable-plugins*)
			disabled_plugins=$optarg
			;;
		--static-plugins*)
			static_plugins=$optarg
			;;
		--enable-syslog*)
			syslog_enable=1
			;;
		--only-accept)
			only_accept=1
			;;
		--only-accept4)
			only_accept4=1
			;;
		--platform*)
			platform=$optarg
			;;
		--default-port*)
			default_port=$optarg
			;;
		--default-user*)
			default_user=$optarg
			;;
		--systemddir*)
			if [ $optarg ] ; then
				systemddir=$optarg
			else
				systemddir=/lib/systemd/system
			fi
			;;
		--linux-kqueue*)
			linux_kqueue=1
			;;
		--polarssl-headers*)
			polarssl_headers=$optarg
			;;
		--polarssl-library*)
			polarssl_library=$optarg
			;;
		--polarssl-debug-level*)
			polarssl_debug_level=$optarg
			;;
		--version*)
			echo -e $bldgrn"Monkey HTTP Server v$VERSION" $txtrst
			echo "Copyright 2001-2014 - Eduardo Silva <eduardo@monkey.io>"
			echo "http://monkey-project.com"
                        echo
			exit 1
			;;
		--build*)
			;;
		--host*)
			;;
		--target*)
			;;
		--exec_prefix*)
			;;
		--sbindir*)
			;;
		--libexecdir*)
			;;
		--sharedstatedir*)
			;;
		--localstatedir*)
			;;
		--oldincludedir*)
			;;
		--infodir*)
			;;
		--disable-silent-rules*)
			;;
		--disable-dependency-tracking*)
			;;
		--with-libtool-sysroot*)
			;;
		*)
			echo "Usage: ./configure [OPTION]... [VAR=VALUE]..."
			echo
			echo -e $bldwht"Optional Commands:" $txtrst
			echo "  --help        Display this help and exit"
			echo "  --version     Display version information and exit"
			echo
			echo -e $bldwht"Build options:"  $txtrst
			echo "  --debug                 Compile Monkey with debugging symbols"
			echo "  --trace                 Enable trace messages (don't use in production)"
			echo "  --no-backtrace          Disable backtrace feature"
			echo "  --linux-trace           Enable Linux Trace Toolkit"
			echo "  --stats                 Enable worker statistics gathering"
			echo "  --python                Generate a python module for monkey"
			echo "  --musl-mode             Enable musl compatibility mode"
			echo "  --uclib-mode            Enable uClib compatibility mode"
                        echo "  --malloc-libc           Use system default memory allocator (default is jemalloc)"
			echo "  --platform=PLATFORM     Target platform: 'generic' or 'android' (default: generic)"
			echo "  --pthread-tls           Use Posix thread keys instead of compiler TLS"
			echo "  --enable-syslog         Force logger to utilize Syslog for logging"
			echo
			echo -e $bldwht"Shared library options:" $txtrst
			echo "  --enable-shared         Build Monkey as a shared library in addition to a stand-alone server"
			echo "  --enable-relaxed-plugins Allow the application to make the library load arbitrary plugins."
			echo "                          WARNING security risk, do not enable in distro packages!"
			echo
			echo -e $bldwht"PolarSSL plugin options:" $txtrst
			echo "  --polarssl-headers      Set the path for PolarSSL headers"
			echo "  --polarssl-library      Set the path where the PolarSSL library can be found"
			echo "  --polarssl-debug-level  Set PolarSSL debug level"
			echo
			echo -e $bldwht"Installation Directories:" $txtrst
			echo "  --prefix=PREFIX         Root prefix directory"
			echo "  --bindir=BINDIR         Binary files (executables)"
			echo "  --libdir=LIBDIR         Libraries"
			echo "  --incdir=INCDIR         Header install path"
			echo "  --sysconfdir=SYSCONFDIR Configuration files"
			echo "  --datadir=DATADIR       Specific Monkey data files"
			echo "  --mandir=MANDIR         Manpages - documentation"
			echo "  --logdir=LOGDIR         Log files"
			echo "  --pidfile=PIDFILE       Path to file to store PID"
			echo "  --plugdir=PLUGDIR       Plugins directory path"
			echo "  --systemddir[=DIR]      Systemd directory path"
			echo "  --enable-plugins=a,b    Enable the listed plugins"
			echo "  --disable-plugins=a,b   Disable the listed plugins"
			echo "  --static-plugins=a,b    Build plugins in static mode"
			echo "  --only-accept           Use only accept(2)"
			echo "  --only-accept4          Use only accept4(2) (default and preferred)"
			echo
			echo -e $bldwht"Override Server Configuration:" $txtrst
			echo "  --default-port=PORT     Override default TCP port (default: 2001)"
			echo "  --default-user=USER     Override default web user (default: nobody)"
			echo
			exit 1
			;;
	esac
done

echo -en $RED"********************************************\n"
echo -en $RED"*"$GREEN$BOLD"        Monkey HTTP Server v$VERSION         "$RED"*\n"
echo -en $RED"*"$YELLOW"           monkey-project.com             "$RED"*\n"
echo -en "*"$BLUE" ---------------------------------------- "$RED"*\n"
echo -en "*"$YELLOW"      Monkey is the next generation       "$RED"*\n"
echo -en "*"$YELLOW"  Web Server for Linux and Embedded Linux "$RED"*\n"
echo -en "*"$YELLOW"                                          "$RED"*\n"
echo -en "*"$YELLOW"        Feel free to reach us at:         "$RED"*\n"
echo -en "*"$YELLOW"                                          "$RED"*\n"
echo -en "*"$YELLOW"        irc.freenode.net #monkey          "$RED"*\n"
echo -en "*"$YELLOW"                                          "$RED"*\n"
echo -en "*"$YELLOW"        Thanks for using Monkey!!!        "$RED"*\n"
echo -en "*"$YELLOW"                                          "$RED"*\n"
echo -en "********************************************"$END_COLOR"\n"
echo -en "System   : "$YELLOW"$SYSINFO"$END_COLOR

lang="en"


# Configure environment
if test -z "$CC" ; then
	gcc_path=`which gcc`
	if test -x "$gcc_path" ; then
		CC="gcc"
	else
		echo
		echo
		echo "I'm a Monkey not a compiler! how do you suppose to compile me ? Install a compiler!"
		exit 1
	fi
fi

if test -z "$AR"; then
    AR="ar"
fi

# Check dependencies for building the
# python library if --python was passed

if [ $mk_python == 1 ]; then
    INCLUDE_PY=$(python -c "from distutils import sysconfig as s; print s.get_config_vars()['INCLUDEPY']")
    if [ ! -f "${INCLUDE_PY}/Python.h" ]; then
        echo
        echo
        echo "Please install python development files for building the monkey python module"
        exit 1
    fi
    cython_path=`which cython`
    if ! test -x "$cython_path"; then
        echo
        echo
        echo "Please install cython for building the monkey python module"
        exit 1
    fi
fi

# STRIP support have been removed, just keep this
# variable for future changes or changes.
if test -z "$STRIP" ; then
	STRIP="strip"
fi

[ -n "$relaxed_plugins" ] && DEFS="$DEFS -DRELAXED_PLUGINS"

CFLAGS_GEN=" -std=gnu99 -Wall -Wextra"
if test -z "$debug" && test -z "$mk_stats"; then
	CFLAGS="$CFLAGS $CFLAGS_GEN -fvisibility=hidden"

	# Only set -O2 if the user didn't include an -O level
	echo "$CFLAGS" | grep -q -e -O || CFLAGS="$CFLAGS -O2"
else
	DEFS="$DEFS -DDEBUG "
	CFLAGS="$CFLAGS $CFLAGS_GEN -g"
fi

if [ $only_accept -eq 1 ] && [ $only_accept4 -eq 1 ] ; then
	echo -e "\nError: you cannot use --only-accept and --only-accept4 at same time\n"
	exit 1
fi

if [ $trace ] ; then
	DEFS="$DEFS -DTRACE"
fi

if [ $uclib_mode ]; then
	DEFS="$DEFS -DUCLIB_MODE"
fi

if [ $musl_mode ]; then
	DEFS="$DEFS -DMUSL_MODE"
fi

if [ $no_backtrace ]; then
	DEFS="$DEFS -DNO_BACKTRACE"
fi

if [ $linux_trace ]; then
        libs="$libs -llttng-ust -lurcu-bp"
	DEFS="$DEFS -DLINUX_TRACE"
fi

if [ $pthread_tls ]; then
	DEFS="$DEFS -DPTHREAD_TLS"
fi

if [ $mk_stats == 1 ]; then
    DEFS="$DEFS -DSTATS"
fi

if [ $mk_python == 1 ]; then
    DEFS="$DEFS -DPYTHON_BINDINGS"
fi

if [ $malloc_libc -eq 1 ]; then
        DEFS="$DEFS -DMALLOC_LIBC"
else
        DEFS="$DEFS -DMALLOC_JEMALLOC -DJEMALLOC_MANGLE"
fi

if [ $platform != "generic" ] && [ $platform != "android" ]; then
	echo -e "\nError: invalid platform $platform\n"
	exit 1
fi

# Build variables
cmd=$@
uname=`uname -a`

case "$OSTYPE" in
  solaris*) target_os="SOLARIS" ;;
  darwin*)  target_os="OSX" ;;
  linux*)   target_os="LINUX" ;;
  bsd*)     target_os="BSD" ;;
  *)        target_os="unknown: $OSTYPE" ;;
esac

# Operating system specifics, some commands needs different
# tweaks, as of now we support Linux and OSX only

if [ $target_os == "LINUX" ]; then
    OS_SED=""
elif [ $target_os == "OSX" ]; then
    OS_SED="''"
fi

# --- END OF OPERATING SYSTEM SPECIFICS ---


# Starting main function
main prefix lang bindir mandir  sysconfdir datadir \
     logdir pidfile plugdir platform only_accept only_accept4 \
     SYSNAME VERSION enabled_plugins disabled_plugins static_plugins \
     no_backtrace linux_trace pthread_tls malloc_libc malloc_jemalloc cmd uname \
     polarssl_headers polarssl_library polarssl_debug_level target_os \
     OS_SED

exit 0
